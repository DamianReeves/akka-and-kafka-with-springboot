plugins {
  id 'scala'
}

task printScalaVersion {
  def parts = scalaVersion.split('\\.')
  def version = parts.take(2).join('.')
  println (version)
}

allprojects {
  project.ext {
    scalaBaseVersion = {
      def parts = scalaVersion.split('\\.')
      def version = parts.take(2).join('.')
      version
    }

    ivy = { String dependency  ->
      dependency
        .replaceFirst(/^([a-zA-Z0-9._+-]+)(?::::)([a-zA-Z0-9._+-]+)(?::)([a-zA-Z0-9._+-]+)\$/,'$1:$2_'+scalaVersion+':$3')
        .replaceFirst(/^([a-zA-Z0-9._+-]+)(?::::)([a-zA-Z0-9._+-]+)(?::)([a-zA-Z0-9._+-]+)(?::)([a-zA-Z0-9._+-]+)\$/,'$1:$2_'+scalaVersion+':$3:$4')
        .replaceFirst(/^([a-zA-Z0-9._+-]+)(?:::)([a-zA-Z0-9._+-]+)(?::)([a-zA-Z0-9._+-]+)\$/,'$1:$2_'+scalaBaseVersion+':$3')
        .replaceFirst(/^([a-zA-Z0-9._+-]+)(?:::)([a-zA-Z0-9._+-]+)(?::)([a-zA-Z0-9._+-]+)(?::)([a-zA-Z0-9._+-]+)\$/,'$1:$2_'+scalaBaseVersion+':$3:$4')
    }
  }
}

subprojects {

  apply plugin: 'scala'

  configurations {
    scalaCompilerPlugin
  }

  dependencies {
    // Use Scala 2.11 in our library project
    compile "org.scala-lang:scala-library:$scalaVersion"
    scalaCompilerPlugin "org.scalamacros:paradise_$scalaVersion:2.1.1"


    testCompile 'junit:junit:4.12'
    testCompile 'org.scalatest:scalatest_2.12:3.0.5'
    testCompile 'org.scalacheck:scalacheck_2.12:1.14.0'
    // Need scala-xml at test runtime
    testRuntime 'org.scala-lang.modules:scala-xml_2.12:1.1.0'
  }


  repositories {
    jcenter()
  }

  tasks.withType(ScalaCompile) {
    // Map plugin jars to -Xplugin parameter
    List<String> parameters =
      configurations.scalaCompilerPlugin.files.collect {
        '-Xplugin:' + it.absolutePath
      }

    // Add existing parameters
    List<String> existingParameters = scalaCompileOptions.additionalParameters
    if (existingParameters) {
      parameters.addAll(existingParameters)
    }

    // Add whatever flags you typically add
    parameters += [
      '-language:implicitConversions',
      '-language:higherKinds'
    ]

    // Finally set the additionalParameters
    scalaCompileOptions.additionalParameters = parameters
  }
}
